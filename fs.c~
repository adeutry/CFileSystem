#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>

void fs_init(char* , int);
struct boot_sec* get_fs_info(FILE*);
char** split_string( char* , char* );

#define CLUSTER_SIZE 512
#define FAT_ENTRY_SIZE 8
#define DIR_TABLE_ENTRY_SIZE 32

int arg_count;



struct directory_table_entry 
{
	char name[11];
	unsigned int create_time:24;    
	unsigned int attribute:  8;
	unsigned int reserved: 23;
	unsigned int create_date: 16;
	unsigned int last_access: 16;
	unsigned int last_modified_time: 16;
	unsigned int last_modified_date: 16;
	unsigned int starting_cluster: 16;
	unsigned int file_size: 32;
	unsigned int allocated: 1;
		
};

struct boot_sec
{
	unsigned int fat_start:32;
	unsigned int fs_size:32;
	unsigned int cluster_size:16;
	unsigned int data_start:32;

};

struct fat_entry{
	unsigned int cluster:24;
	unsigned int next: 15;
	unsigned int allocated:1;

};

struct file_descriptor
{
	unsigned int pointer:32;

};

int main()
{
	/*
	struct directory_table_entry entry1;
	entry1.create_date = 20;
	strcpy( entry1.name , "filename");

	printf("%s\n" , entry1.name);
	*/

	//fs_init("fstest" , 10485760 ); 

	FILE *fp = fopen( "fstest" , "rb");

	struct boot_sec* fs_info= get_fs_info( fp );

	char path[] = "/home/folder/ayy.txt";

	char** dirs = split_string( path , "/");

	int i;
	printf("argcount: %d\n" , arg_count);

	for( i = 0 ; i < arg_count ; i++)
	{
		if( dirs[i] != NULL)
			printf("dirs[%d]: %s\n" , i , dirs[i] );
	}
	
	return 0;


}

void fs_init(char* filename , int fs_size)
{
	
	
	FILE *fp = fopen(filename , "wb");

    struct boot_sec boot_sector;

    //check to see if the desired fs_size is divisible by the cluster size
    if( (fs_size % CLUSTER_SIZE )!= 0)
    {
    	printf("warning: specified filesystem size not divisible by CLUSTER_SIZE");
    	return;
    }

 	//write boot_sector
    
    boot_sector.fat_start = sizeof(struct boot_sec);

    boot_sector.fs_size = fs_size;

    boot_sector.cluster_size = CLUSTER_SIZE;

    boot_sector.data_start = sizeof(struct boot_sec) + (fs_size / CLUSTER_SIZE)*FAT_ENTRY_SIZE + 1;

    fwrite(&boot_sector , 1 , sizeof(struct boot_sec) , fp);

    
    //write initial fat entry
   
	struct fat_entry root_fat_entry;

    root_fat_entry.cluster = boot_sector.data_start;

    root_fat_entry.next = -1;

    root_fat_entry.allocated = 1;

    fseek( fp , boot_sector.fat_start , SEEK_SET);

    fwrite( &root_fat_entry , 1 , FAT_ENTRY_SIZE , fp );

    
    //write the rest of the fat entries

    int i;

    root_fat_entry.cluster = 0;

    root_fat_entry.next = -1;

    root_fat_entry.allocated = 0;

    for( i = 1 ; i < fs_size / CLUSTER_SIZE ; i++)
    {
    	fseek( fp , boot_sector.fat_start + i * FAT_ENTRY_SIZE , SEEK_SET );

    	fwrite( &root_fat_entry , 1 , FAT_ENTRY_SIZE , fp);
    }

    fclose(fp);

	/*
	//write
	FILE *fp = fopen(filename , "wb");

	struct directory_table_entry entry;

	strcpy( entry.name , "ayylmao");

	fwrite(&entry , 1 , sizeof(entry) , fp);

	fclose(fp);

    //read
	fp = fopen(filename , "rb");

    printf("sizeof(struct directory_table_entry): %d\n" , (int)sizeof(struct directory_table_entry));

    char fn[sizeof(struct directory_table_entry)];

    fread(fn , 1 , sizeof(struct directory_table_entry) , fp);

    printf("%s\n" , fn);

    fclose(fp);
    */

    





}

struct boot_sec* get_fs_info(FILE* fp)
{
	struct boot_sec* fs_info = (struct boot_sec*)malloc( sizeof(struct boot_sec) );

	fseek( fp , 0 , SEEK_SET);

	fread( fs_info , 1 , sizeof( struct boot_sec ) , fp );

	printf("\nreading boot sector...\n");
	
	printf("   fs_size      : %d\n" , fs_info->fs_size);

	printf("   fat_start    : %d\n" , fs_info->fat_start);

	printf("   cluster_size : %d\n" , fs_info->cluster_size);

	printf("   data_start   : %d\n\n" , fs_info->data_start);

	return fs_info; 
}

char** split_string(char* s , char* delims)
{
		
	
	char* temp = s;
	int count = 1;
	int in_whitespace;
	
	while(*temp)
	{
		if((*temp == '/') && !in_whitespace)
		{
			count++;
			in_whitespace = 1;
		}else if((*temp != '/') && in_whitespace)
		{
			in_whitespace = 0;
		}
		
		temp++;
	}
	
	char** ret = (char**)malloc( (count + 2) * sizeof(char *));
	memset(ret , 0 , (count + 2) * sizeof(char *));
	arg_count = count;
	count = 0;
	temp = strtok(s ,delims);
	
	
	while(temp != NULL)
	{
		
		ret[count] = (char*)malloc(sizeof(char) * (int)strlen(temp));
		memset(ret[count] , 0 ,sizeof(char) * ((int)strlen(temp) + 1));
		strncpy(ret[count] , temp ,sizeof(char) * (int)strlen(temp));
		temp = strtok( NULL, delims);
		count++;
	}
	
	ret[count] = (char*)malloc(sizeof(char));
	ret[count] = NULL;
	
	
	
	return ret;
	
	
	
}










var a;

a = 5;

funcName = function( param1, param2)
{
	return 5;
}

funcName( 22 ) 






















